#include <stdio.h>
#include <math.h>
#include "ScoreTable.h"
#include <vector>
#include <string>
#include "ns3/assert.h"
#include "ns3/log.h"
#include "ns3/simulator.h"
#include "ns3/nstime.h"
#include <iostream>
#include <map>
#include <list>

using namespace ns3;
//class MyReceiver{

//public:
void MyReceiver::sendMessage(uint16_t receiver_id, uint16_t packetType, uint32_t pktCount, Time pktInterval)
{
  if (pktCount <= 0) return;
  //message format(receiver_id, packetType, encrypted message/key_id)
  MyHeader idHeader;
  MyHeader typeHeader;
  Ptr<Packet> msg;
  if (packetType == 1)
    msg = Create<Packet> (reinterpret_cast<const uint8_t*> ("This is the encrypted message."), 1);
  else if (packetType == 2)
    msg = Create<Packet> (reinterpret_cast<const uint8_t*> ("This is the key."), 1);
  else 
  {
    cout<< "The message type is wrong." <<endl;
    return;
  }
  idHeader.setData(receiver_id);
  typeHeader.setData(packetType);  
  encryptedMsg -> AddHeader(idHeader);
  encryptedMsg -> AddHeader(typeHeader);
  this -> mySocket -> Send(msg);
  Simulator::Schedule (pktInterval, &MyReceiver::sendMessage, this, receiver_id, packetType, 1, pktInterval);
}


//};
